#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        LManalysis.py
#
#  Project :     LM_analysis
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      yury.matveev$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["LManalysis", "LManalysisClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(LManalysis.additionnal_import) ENABLED START -----#

#----- PROTECTED REGION END -----#	//	LManalysis.additionnal_import

# Device States Description
# ON : Server is ready
# OFF : 
# FAULT : 


class LManalysis (PyTango.LatestDeviceImpl):
    """"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(LManalysis.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LManalysis.global_variables

    def __init__(self, cl, name):
        PyTango.LatestDeviceImpl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        LManalysis.init_device(self)
        #----- PROTECTED REGION ID(LManalysis.__init__) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LManalysis.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(LManalysis.delete_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LManalysis.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_max_x_read = 0.0
        self.attr_max_y_read = 0.0
        self.attr_max_intensity_read = 0.0
        self.attr_com_x_read = 0.0
        self.attr_com_y_read = 0.0
        self.attr_fwhm_x_read = 0.0
        self.attr_fwhm_y_read = 0.0
        self.attr_roi_sum_read = 0.0
        self.attr_scan_parameter_read = ""
        self.attr_value_read = 0.0
        #----- PROTECTED REGION ID(LManalysis.init_device) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LManalysis.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(LManalysis.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LManalysis.always_executed_hook

    # -------------------------------------------------------------------------
    #    LManalysis read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_max_x(self, attr):
        self.debug_stream("In read_max_x()")
        #----- PROTECTED REGION ID(LManalysis.max_x_read) ENABLED START -----#
        attr.set_value(self.attr_max_x_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.max_x_read
        
    def read_max_y(self, attr):
        self.debug_stream("In read_max_y()")
        #----- PROTECTED REGION ID(LManalysis.max_y_read) ENABLED START -----#
        attr.set_value(self.attr_max_y_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.max_y_read
        
    def read_max_intensity(self, attr):
        self.debug_stream("In read_max_intensity()")
        #----- PROTECTED REGION ID(LManalysis.max_intensity_read) ENABLED START -----#
        attr.set_value(self.attr_max_intensity_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.max_intensity_read
        
    def read_com_x(self, attr):
        self.debug_stream("In read_com_x()")
        #----- PROTECTED REGION ID(LManalysis.com_x_read) ENABLED START -----#
        attr.set_value(self.attr_com_x_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.com_x_read
        
    def read_com_y(self, attr):
        self.debug_stream("In read_com_y()")
        #----- PROTECTED REGION ID(LManalysis.com_y_read) ENABLED START -----#
        attr.set_value(self.attr_com_y_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.com_y_read
        
    def read_fwhm_x(self, attr):
        self.debug_stream("In read_fwhm_x()")
        #----- PROTECTED REGION ID(LManalysis.fwhm_x_read) ENABLED START -----#
        attr.set_value(self.attr_fwhm_x_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.fwhm_x_read
        
    def read_fwhm_y(self, attr):
        self.debug_stream("In read_fwhm_y()")
        #----- PROTECTED REGION ID(LManalysis.fwhm_y_read) ENABLED START -----#
        attr.set_value(self.attr_fwhm_y_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.fwhm_y_read
        
    def read_roi_sum(self, attr):
        self.debug_stream("In read_roi_sum()")
        #----- PROTECTED REGION ID(LManalysis.roi_sum_read) ENABLED START -----#
        attr.set_value(self.attr_roi_sum_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.roi_sum_read
        
    def read_scan_parameter(self, attr):
        self.debug_stream("In read_scan_parameter()")
        #----- PROTECTED REGION ID(LManalysis.scan_parameter_read) ENABLED START -----#
        attr.set_value(self.attr_scan_parameter_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.scan_parameter_read
        
    def write_scan_parameter(self, attr):
        self.debug_stream("In write_scan_parameter()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(LManalysis.scan_parameter_write) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LManalysis.scan_parameter_write
        
    def read_value(self, attr):
        self.debug_stream("In read_value()")
        #----- PROTECTED REGION ID(LManalysis.value_read) ENABLED START -----#
        attr.set_value(self.attr_value_read)
        
        #----- PROTECTED REGION END -----#	//	LManalysis.value_read
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(LManalysis.read_attr_hardware) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LManalysis.read_attr_hardware


    # -------------------------------------------------------------------------
    #    LManalysis command methods
    # -------------------------------------------------------------------------
    
    def Start(self):
        """ does analysis of last frame
        """
        self.debug_stream("In Start()")
        #----- PROTECTED REGION ID(LManalysis.Start) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LManalysis.Start
        
    def Stop(self):
        """ 
        """
        self.debug_stream("In Stop()")
        #----- PROTECTED REGION ID(LManalysis.Stop) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LManalysis.Stop
        

    #----- PROTECTED REGION ID(LManalysis.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LManalysis.programmer_methods

class LManalysisClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(LManalysis.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#	//	LManalysis.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'ROI':
            [PyTango.DevVarShortArray, 
            "ROI coordinates: (x, y, h, w)",
            [(0, 0, 0, 0)]],
        'CameraDevice':
            [PyTango.DevString, 
            "Adress of related camera tango server",
            [] ],
        }


    #    Command definitions
    cmd_list = {
        'Start':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'max_x':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
                'description': "x coordinate of maxumum",
            } ],
        'max_y':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
            } ],
        'max_intensity':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'com_x':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'com_y':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'fwhm_x':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
            } ],
        'fwhm_y':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'unit': "px",
                'display unit': "px",
            } ],
        'roi_sum':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'scan_parameter':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'Memorized':"true_without_hard_applied"
            } ],
        'value':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(LManalysisClass, LManalysis, 'LManalysis')
        #----- PROTECTED REGION ID(LManalysis.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#	//	LManalysis.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()
